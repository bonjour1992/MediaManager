{
  "author": {
    "name": "Tim"
  },
  "contributors": [
    {
      "name": "Alex Bepple"
    }
  ],
  "name": "transmission",
  "description": "API client for transmissionbt",
  "version": "0.4.5",
  "scripts": {
    "test": "mocha --ui bdd --reporter spec --colors --slow 10000"
  },
  "bin": {
    "node-transmission": "./bin/node-transmission"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/FLYBYME/node-transmission.git"
  },
  "main": "lib/transmission",
  "devDependencies": {
    "async": "^0.9.0",
    "chai": "^1.9.2",
    "dotenv": "^0.4.0",
    "mocha": "^2.0.1",
    "mocha-jshint": "0.0.9",
    "progress": "^1.1.8"
  },
  "dependencies": {
    "yargs": "^1.3.3"
  },
  "readme": "# node-transmission\r\n\r\ntransmission-daemon wrapper script written in node.js\r\n\r\n## Install\r\n\r\n```sh\r\nnpm install transmission\r\n```\r\n\r\n## How to Use\r\n\r\n```js\r\nTransmission = require 'transmission'\r\ntransmission = new Transmission\r\n  host: 'localhost'  # default 'localhost'\r\n  port: 9091         # default 9091\r\n  username: 'username'   # default blank\r\n  password: 'password'   # default blank\r\n  url: '/my/other/url'   # default '/transmission/rpc'\r\n```\r\n\r\n## Definition\r\n\r\n### Status\r\n\r\nRPC returned torrent status with integer `0-7`.\r\n\r\nUsing `transmission.status` for inspect status.\r\n\r\n```\r\ntransmission.status =\r\n  STOPPED       : 0  # Torrent is stopped\r\n  CHECK_WAIT    : 1  # Queued to check files\r\n  CHECK         : 2  # Checking files\r\n  DOWNLOAD_WAIT : 3  # Queued to download\r\n  DOWNLOAD      : 4  # Downloading\r\n  SEED_WAIT     : 5  # Queued to seed\r\n  SEED          : 6  # Seeding\r\n  ISOLATED      : 7  # Torrent can't find peers\r\n```\r\n\r\n## Methods\r\n\r\n### transmission.set([ids], callback)\r\n\r\nSet torrent's properties.\r\n\r\n```js\r\ntransmission.set(id, options, function(err, arg){});\r\n```\r\nYou must provide one or more ids. According to the rpc-spec, transmission will not respond a success argument. Only error.\r\n\r\n### transmission.addFile(filePath, callback)\r\n\r\nAdd torrents to transmission-daemon.\r\n\r\n```js\r\ntransmission.addFile('path', function(err, arg){});\r\n```\r\n\r\nOR\r\n\r\nThe `options` object would be the arguments passed to transmission.\r\nIf you want to set the download directory of the torrent you would pass in `\"download-dir\":\"/my/path\"`\r\n\r\n```js\r\ntransmission.addFile('path', options, function(err, arg){});\r\n```\r\n\r\n### transmission.addUrl(url, callback)\r\n\r\nAdd torrents to transmission-daemon.\r\n\r\n```js\r\ntransmission.addUrl('url', function(err, arg){});\r\n```\r\nOR\r\n\r\nThe `options` object would be the arguments passed to transmission.\r\nIf you want to set the download directory of the torrent you would pass in `\"download-dir\":\"/my/path\"`\r\n\r\n```js\r\ntransmission.addUrl('url', options, function(err, arg){});\r\n```\r\n\r\n### transmission.remove(ids, del, callback)\r\n\r\nRemove torrents.\r\n\r\nRemove also local data when `del` is `true`.\r\n\r\n```js\r\ntransmission.remove(ids, function(err, arg){});\r\n```\r\n\r\n### transmission.active(callback)\r\n\r\nList of active torrents. Callback is not needed and will fire the `active` event.\r\n\r\n```js\r\ntransmission.active(function(err, arg){});\r\n```\r\n\r\n### transmission.get([ids], callback)\r\n\r\nGet torrents info that optional `ids`.\r\n\r\nIf omit `ids`, get all torrents.\r\n\r\n```js\r\ntransmission.get(ids, function(err, arg){\r\n  if err\r\n    console.error err\r\n  else{\r\n    for torrent in arg.torrents\r\n      console.log arg.torrents\r\n   }\r\n});\r\n\r\n# Get all torrents and remove it if status is stopped.\r\ntransmission.get(function(err, arg){\r\n  if err\r\n    console.error err\r\n  else{\r\n    for torrent in arg.torrents\r\n      if torrent.status is transmission.status.STOPPED\r\n        transmission.remove ([torrent.id], function (err){\r\n          console.error err if err\r\n      \t});\r\n  }\r\n});\r\n```\r\n\r\n### transmission.stop(ids, callback)\r\n\r\nStop working torrents.\r\n\r\n```js\r\ntransmission.stop(ids, function(err, arg){});\r\n```\r\n\r\n### transmission.start(ids, callback)\r\n\r\nStart working torrents.\r\n\r\n```js\r\ntransmission.start(ids, function(err, arg){});\r\n```\r\n\r\n### transmission.startNow(ids, callback)\r\n\r\nBypass the download queue, start working torrents immediately.\r\n\r\n```js\r\ntransmission.startNow(ids, function(err, arg){});\r\n```\r\n\r\n### transmission.verify(ids, callback)\r\n\r\nVerify torrent data.\r\n\r\n```js\r\ntransmission.verify(ids,function(err, arg){});\r\n```\r\n\r\n### transmission.reannounce(ids, callback)\r\n\r\nReannounce to the tracker, ask for more peers.\r\n\r\n```js\r\ntransmission.reannounce(ids, function(err, arg){});\r\n```\r\n\r\n### transmission.session(callback)\r\n\r\nGet client session infomation.\r\n\r\n```js\r\ntransmission.session (function(err, arg){});\r\n```\r\n\r\n### transmission.session({}, callback)\r\n\r\nSet session infomation.\r\n\r\n```js\r\ntransmission.session({'download-dir':'/my/path'}, function(err, arg){});\r\n```\r\n\r\n### transmission.sessionStats(callback)\r\n\r\nGet client session stats.\r\n\r\n```js\r\ntransmission.sessionStats(function(err, arg){});\r\n```\r\n\r\n### All together.\r\n\r\n```js\r\n'use strict';\r\n\r\nvar Transmission = require('transmission');\r\nvar transmission = new Transmission({\r\n\tport: 9091,\t\t\t// DEFAULT : 9091\r\n\thost: 192.168.1.34,\t\t\t// DEAFULT : 127.0.0.1\r\n\tusername: 'username',\t// DEFAULT : BLANK\r\n\tpassword: 'password'\t// DEFAULT : BLANK\r\n});\r\n\r\n// Get details of all torrents currently queued in transmission app\r\nfunction getTransmissionStats(){\r\n\ttransmission.sessionStats(function(err, result){\r\n\t\tif(err){\r\n\t\t\tconsole.log(err);\r\n\t\t} else {\r\n\t\t\tconsole.log(result);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Add a torrent by passing a URL to .torrent file or a magnet link\r\nfunction addTorrent(url){\r\n\ttransmission.addUrl(url, {\r\n\t    \"download-dir\" : \"~/transmission/torrents\"\r\n\t}, function(err, result) {\r\n\t    if (err) {\r\n\t        return console.log(err);\r\n\t    }\r\n\t    var id = result.id;\r\n\t    console.log('Just added a new torrent.');\r\n\t    console.log('Torrent ID: ' + id);\r\n\t});\r\n}\r\n\r\n// Get various stats about a torrent in the queue\r\nfunction getTorrentDetails(id) {\r\n    transmission.get(id, function(err, result) {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n        if(result.torrents.length > 0){\r\n        \t// console.log(result.torrents[0]);\t\t\t// Gets all details\r\n        \tconsole.log(\"Name = \"+ result.torrents[0].name);\r\n        \tconsole.log(\"Download Rate = \"+ result.torrents[0].rateDownload/1000);\r\n        \tconsole.log(\"Upload Rate = \"+ result.torrents[0].rateUpload/1000);\r\n        \tconsole.log(\"Completed = \"+ result.torrents[0].percentDone*100);\r\n        \tconsole.log(\"ETA = \"+ result.torrents[0].eta/3600);\r\n        \tconsole.log(\"Status = \"+ getStatusType(result.torrents[0].status));\r\n        }\r\n    });\r\n}\r\n\r\nfunction deleteTorrent(id){\r\n\ttransmission.remove(id, true, function(err, result){\r\n\t\tif (err){\r\n\t\t\tconsole.log(err);\r\n\t\t} else {\r\n\t\t\tconsole.log(result);// Read this output to get more details which can be accessed as shown below.\r\n\t\t\t// Extra details\r\n\t\t\tconsole.log('bt.get returned ' + result.torrents.length + ' torrents');\r\n\t \t\tresult.torrents.forEach(function(torrent) {\r\n\t \t\t\tconsole.log('hashString', torrent.hashString)\r\n\t \t\t});\r\n\t \t\tremoveTorrent(id);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// To start a paused / stopped torrent which is still in queue\r\nfunction startTorrent(id){\r\n\ttransmission.start(id, function(err, result){});\r\n}\r\n\r\n// To get list of all torrents currently in queue (downloading + paused)\r\n// NOTE : This may return null if all torrents are in paused state \r\nfunction getAllActiveTorrents(){\r\n\ttransmission.active(function(err, result){\r\n\tif (err){\r\n\t\tconsole.log(err);\r\n\t}\r\n\telse {\r\n\t\tfor (var i=0; i< result.torrents.length; i++){\r\n\t\t\tconsole.log(result.torrents[i].id);\r\n\t\t\tconsole.log(result.torrents[i].name);\r\n\t\t}\r\n\t}\r\n\t});\r\n}\r\n\r\n// Pause / Stop a torrent\r\nfunction stopTorrent(id){\r\n\ttransmission.stop(id, function(err, result){});\r\n}\r\n\r\n// Pause / Stop all torrent\r\nfunction stopAllActiveTorrents(){\r\n\ttransmission.active(function(err, result){\r\n\tif (err){\r\n\t\tconsole.log(err);\r\n\t}\r\n\telse {\r\n\t\tfor (var i=0; i< result.torrents.length; i++){\r\n\t\t\tstopTorrents(result.torrents[i].id);\r\n\t\t}\r\n\t}\r\n\t});\r\n}\r\n\r\n// Remove a torrent from download queue\r\n// NOTE : This does not trash torrent data i.e. does not remove it from disk\r\nfunction removeTorrent(id) {\r\n    transmission.remove(id, function(err) {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n        console.log('torrent was removed');\r\n    });\r\n}\r\n\r\n// Get torrent state\r\nfunction getStatusType(type){\r\n\tif(type === 0){\r\n\t\treturn 'STOPPED';\r\n\t} else if(type === 1){\r\n\t\treturn 'CHECK_WAIT';\r\n\t} else if(type === 2){\r\n\t\treturn 'CHECK';\r\n\t} else if(type === 3){\r\n\t\treturn 'DOWNLOAD_WAIT';\r\n\t} else if(type === 4){\r\n\t\treturn 'DOWNLOAD';\r\n\t} else if(type === 5){\r\n\t\treturn 'SEED_WAIT';\r\n\t} else if(type === 6){\r\n\t\treturn 'SEED';\r\n\t} else if(type === 7){\r\n\t\treturn 'ISOLATED';\r\n\t}\r\n}\r\n\r\n```\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/FLYBYME/node-transmission/issues"
  },
  "_id": "transmission@0.4.5",
  "_from": "transmission@"
}
